// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Publicator.Infrastructure;

namespace Publicator.Infrastructure.Migrations
{
    [DbContext(typeof(PublicatorDbContext))]
    partial class PublicatorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Publicator.Infrastructure.Entities.Bookmark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("smalldatetime");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookmarks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("78985e67-8120-475e-83ba-7d7e1d7c872a"),
                            CreationDate = new DateTime(2020, 1, 28, 21, 43, 23, 962, DateTimeKind.Local).AddTicks(2875),
                            PostId = new Guid("5c22e9bb-d706-442c-93c4-0dee89cfe7d1"),
                            UserId = new Guid("afbc4e51-5279-4d93-ab05-40cff74088b2")
                        });
                });

            modelBuilder.Entity("Publicator.Infrastructure.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .IsUnicode(true);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("smalldatetime");

                    b.Property<Guid?>("ParentRepliedCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentRepliedCommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e546d420-a130-4f8a-ac49-64fac2f32f82"),
                            Content = "<p>Hilarious, how it happened with you</p>",
                            CreationDate = new DateTime(2020, 1, 26, 21, 43, 23, 961, DateTimeKind.Local).AddTicks(9618),
                            PostId = new Guid("63001e62-4a0d-42af-b701-bcbf1ed657e6"),
                            UserId = new Guid("afbc4e51-5279-4d93-ab05-40cff74088b2")
                        },
                        new
                        {
                            Id = new Guid("2b425d64-3325-4585-9dc6-c01dc2f8841b"),
                            Content = "<p>It happened in 2016 year, i was 16 years old</p>",
                            CreationDate = new DateTime(2020, 1, 27, 21, 43, 23, 962, DateTimeKind.Local).AddTicks(1172),
                            ParentRepliedCommentId = new Guid("e546d420-a130-4f8a-ac49-64fac2f32f82"),
                            PostId = new Guid("63001e62-4a0d-42af-b701-bcbf1ed657e6"),
                            UserId = new Guid("1372c680-c3ec-4d3a-b45c-306c1825d5b0")
                        });
                });

            modelBuilder.Entity("Publicator.Infrastructure.Entities.Community", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(true);

                    b.Property<string>("PictureName")
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.ToTable("Communities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad88a4e6-2a41-427c-9a92-d08712547ba6"),
                            CreationDate = new DateTime(2020, 1, 25, 21, 43, 23, 961, DateTimeKind.Local).AddTicks(1002),
                            CreatorUserId = new Guid("afbc4e51-5279-4d93-ab05-40cff74088b2"),
                            Description = "Here users post stories about theirs lifes.",
                            Name = "Stories about Life"
                        },
                        new
                        {
                            Id = new Guid("30c42092-2bba-4dbb-917c-8bbb6c39c2ce"),
                            CreationDate = new DateTime(2020, 1, 25, 21, 43, 23, 961, DateTimeKind.Local).AddTicks(2608),
                            CreatorUserId = new Guid("afbc4e51-5279-4d93-ab05-40cff74088b2"),
                            Description = "Community about vehicles and all about it.",
                            Name = "Vehicle"
                        });
                });

            modelBuilder.Entity("Publicator.Infrastructure.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CommunityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("smalldatetime");

                    b.Property<Guid>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrentRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("CreatorUserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("63001e62-4a0d-42af-b701-bcbf1ed657e6"),
                            CommunityId = new Guid("ad88a4e6-2a41-427c-9a92-d08712547ba6"),
                            Content = "<p>In this post i want to tell you story of my life...</p>",
                            CreationDate = new DateTime(2020, 1, 25, 21, 43, 23, 961, DateTimeKind.Local).AddTicks(4764),
                            CreatorUserId = new Guid("afbc4e51-5279-4d93-ab05-40cff74088b2"),
                            CurrentRating = 0,
                            Name = "Post about my life"
                        },
                        new
                        {
                            Id = new Guid("5c22e9bb-d706-442c-93c4-0dee89cfe7d1"),
                            CommunityId = new Guid("ad88a4e6-2a41-427c-9a92-d08712547ba6"),
                            Content = "<p>Once upon a time in Ukraine, village Sokal i studied in school...</p>",
                            CreationDate = new DateTime(2020, 1, 25, 21, 43, 23, 961, DateTimeKind.Local).AddTicks(7272),
                            CreatorUserId = new Guid("1372c680-c3ec-4d3a-b45c-306c1825d5b0"),
                            CurrentRating = 0,
                            Name = "Happened in Sokal"
                        });
                });

            modelBuilder.Entity("Publicator.Infrastructure.Entities.PostTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb3db4ca-1161-4e99-9414-085ce3e5e9b3"),
                            PostId = new Guid("63001e62-4a0d-42af-b701-bcbf1ed657e6"),
                            TagId = new Guid("a29b5428-55b0-4518-a3de-1dfa6dbbba5b")
                        },
                        new
                        {
                            Id = new Guid("34e2ad48-31d4-43b4-9339-e679a46f974e"),
                            PostId = new Guid("63001e62-4a0d-42af-b701-bcbf1ed657e6"),
                            TagId = new Guid("6ba013f1-1690-4804-b666-a426419b6a34")
                        });
                });

            modelBuilder.Entity("Publicator.Infrastructure.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e6afcebe-eb6b-425a-bee2-835497b9ac99"),
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = new Guid("76170001-5c3d-453c-a2c8-89617d61d0d2"),
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = new Guid("2677745d-48c4-424b-b5d2-98bc47b47aa3"),
                            Name = "Simple"
                        });
                });

            modelBuilder.Entity("Publicator.Infrastructure.Entities.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30f367c3-7b13-4d5a-b9a1-fb57aca165c5"),
                            Name = "Active"
                        },
                        new
                        {
                            Id = new Guid("9b44ae28-17ab-4663-b397-3860a83a5284"),
                            Name = "Freezed"
                        });
                });

            modelBuilder.Entity("Publicator.Infrastructure.Entities.SubscriptionNewPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubscriptionCommunityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubscriptionTagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubscriptionUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("SubscriptionCommunityId");

                    b.HasIndex("SubscriptionTagId");

                    b.HasIndex("SubscriptionUserId");

                    b.HasIndex("UserId");

                    b.ToTable("SubscriptionNewPosts");
                });

            modelBuilder.Entity("Publicator.Infrastructure.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a29b5428-55b0-4518-a3de-1dfa6dbbba5b"),
                            Name = "Life"
                        },
                        new
                        {
                            Id = new Guid("e87ce936-94ba-42d0-a780-ca622920e2ac"),
                            Name = "Motorcycle"
                        },
                        new
                        {
                            Id = new Guid("eb044179-5072-49cf-ac94-4c2b66e3f791"),
                            Name = "Car"
                        },
                        new
                        {
                            Id = new Guid("6ba013f1-1690-4804-b666-a426419b6a34"),
                            Name = "Politic"
                        });
                });

            modelBuilder.Entity("Publicator.Infrastructure.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BeginStateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(true);

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("EndStateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(true);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(true);

                    b.Property<string>("PictureName")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(true);

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("StateId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("afbc4e51-5279-4d93-ab05-40cff74088b2"),
                            BeginStateDate = new DateTime(2020, 1, 25, 21, 43, 23, 960, DateTimeKind.Local).AddTicks(4198),
                            Email = "lineyk27gg@gmail.com",
                            EmailConfirmed = false,
                            EndStateDate = new DateTime(2050, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JoinDate = new DateTime(2020, 1, 25, 21, 43, 23, 954, DateTimeKind.Local).AddTicks(8070),
                            Nickname = "lineyk27gg",
                            PasswordHash = "ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f",
                            RoleId = new Guid("2677745d-48c4-424b-b5d2-98bc47b47aa3"),
                            StateId = new Guid("30f367c3-7b13-4d5a-b9a1-fb57aca165c5")
                        },
                        new
                        {
                            Id = new Guid("1372c680-c3ec-4d3a-b45c-306c1825d5b0"),
                            BeginStateDate = new DateTime(2020, 1, 25, 21, 43, 23, 960, DateTimeKind.Local).AddTicks(8702),
                            Email = "lineyk27@yandex.ru",
                            EmailConfirmed = false,
                            EndStateDate = new DateTime(2050, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JoinDate = new DateTime(2020, 1, 25, 21, 43, 23, 960, DateTimeKind.Local).AddTicks(8661),
                            Nickname = "lineyk27",
                            PasswordHash = "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8",
                            RoleId = new Guid("2677745d-48c4-424b-b5d2-98bc47b47aa3"),
                            StateId = new Guid("30f367c3-7b13-4d5a-b9a1-fb57aca165c5")
                        });
                });

            modelBuilder.Entity("Publicator.Infrastructure.Entities.UserCommunity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommunityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("smalldatetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCommunities");
                });

            modelBuilder.Entity("Publicator.Infrastructure.Entities.UserSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubscriberUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubscriptionUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubscriberUserId");

                    b.HasIndex("SubscriptionUserId");

                    b.ToTable("UserSubscriptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3470e86b-9a6d-4612-92b3-4cbc4dbe297f"),
                            SubscriberUserId = new Guid("afbc4e51-5279-4d93-ab05-40cff74088b2"),
                            SubscriptionUserId = new Guid("1372c680-c3ec-4d3a-b45c-306c1825d5b0")
                        });
                });

            modelBuilder.Entity("Publicator.Infrastructure.Entities.UserTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTags");
                });

            modelBuilder.Entity("Publicator.Infrastructure.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("smalldatetime");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Up")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Publicator.Infrastructure.Entities.Bookmark", b =>
                {
                    b.HasOne("Publicator.Infrastructure.Entities.Post", "Post")
                        .WithMany("Bookmarks")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Publicator.Infrastructure.Entities.User", "User")
                        .WithMany("Bookmarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Publicator.Infrastructure.Entities.Comment", b =>
                {
                    b.HasOne("Publicator.Infrastructure.Entities.Comment", "ParentRepliedComment")
                        .WithMany("RepliesComments")
                        .HasForeignKey("ParentRepliedCommentId");

                    b.HasOne("Publicator.Infrastructure.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Publicator.Infrastructure.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Publicator.Infrastructure.Entities.Community", b =>
                {
                    b.HasOne("Publicator.Infrastructure.Entities.User", "CreatorUser")
                        .WithMany("CreatedCommunities")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Publicator.Infrastructure.Entities.Post", b =>
                {
                    b.HasOne("Publicator.Infrastructure.Entities.Community", "Community")
                        .WithMany("Posts")
                        .HasForeignKey("CommunityId");

                    b.HasOne("Publicator.Infrastructure.Entities.User", "CreatorUser")
                        .WithMany("Posts")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Publicator.Infrastructure.Entities.PostTag", b =>
                {
                    b.HasOne("Publicator.Infrastructure.Entities.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Publicator.Infrastructure.Entities.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Publicator.Infrastructure.Entities.SubscriptionNewPost", b =>
                {
                    b.HasOne("Publicator.Infrastructure.Entities.Post", "Post")
                        .WithMany("SubscriptionNewPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Publicator.Infrastructure.Entities.Community", "SubscriptionCommunity")
                        .WithMany("SubscriptionNewPosts")
                        .HasForeignKey("SubscriptionCommunityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Publicator.Infrastructure.Entities.Tag", "SubscriptionTag")
                        .WithMany()
                        .HasForeignKey("SubscriptionTagId");

                    b.HasOne("Publicator.Infrastructure.Entities.User", "SubscriptionUser")
                        .WithMany()
                        .HasForeignKey("SubscriptionUserId");

                    b.HasOne("Publicator.Infrastructure.Entities.User", "User")
                        .WithMany("SubscriptionNewPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Publicator.Infrastructure.Entities.User", b =>
                {
                    b.HasOne("Publicator.Infrastructure.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Publicator.Infrastructure.Entities.State", "State")
                        .WithMany("Users")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Publicator.Infrastructure.Entities.UserCommunity", b =>
                {
                    b.HasOne("Publicator.Infrastructure.Entities.Community", "Community")
                        .WithMany("UserCommunities")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Publicator.Infrastructure.Entities.User", "User")
                        .WithMany("UserCommunities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Publicator.Infrastructure.Entities.UserSubscription", b =>
                {
                    b.HasOne("Publicator.Infrastructure.Entities.User", "SubscriberUser")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriberUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Publicator.Infrastructure.Entities.User", "SubscriptionUser")
                        .WithMany("Subscribers")
                        .HasForeignKey("SubscriptionUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Publicator.Infrastructure.Entities.UserTag", b =>
                {
                    b.HasOne("Publicator.Infrastructure.Entities.Tag", "Tag")
                        .WithMany("UserTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Publicator.Infrastructure.Entities.User", "User")
                        .WithMany("SubscribeTags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Publicator.Infrastructure.Entities.Vote", b =>
                {
                    b.HasOne("Publicator.Infrastructure.Entities.Post", "Post")
                        .WithMany("Votes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Publicator.Infrastructure.Entities.User", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
